#!/bin/bash
################################################################################

usage() {
  printf 'Usage: %s [command]\n\n' "$(basename "$0")"
  printf '[command]\tAvailable options: "build", "run", "shell"\n'
  printf '\t\tDefault option: "shell"\n'
  exit 1
}

# find_container_file [source_path]
#
# Print path of nearest Containerfile/Dockerfile.
# Defaults to current working dir if [source_path] not supplied 
find_container_file() {
  local source_path
  source_path="$(realpath -sm "${*:-.}")" || return 1
  while [[ "$source_path" != "/" ]]; do
    if [[ -f "$source_path"/Dockerfile ]]; then
      printf '%s/Dockerfile\n' "$source_path"
      return 0
    elif [[ -f "$source_path"/Containerfile ]]; then
      printf '%s/Containerfile\n' "$source_path"
      return 0
    else
      source_path="$(dirname "$source_path")"
    fi
  done
  return 1
}

# determine which executable to use
find_exe() {
  if command -v "podman" > /dev/null; then
    printf 'podman\n'
  elif command -v "docker" > /dev/null; then
    printf 'docker\n'
  else 
    return 1
  fi
}

runcmd() {
  exe="$1"
  shift 1
  args=("$@")

  1>&2 printf 'Executing: %s %s\n' "$exe" "${args[*]}"
  $exe "${args[@]}"
}

main() {
  local exe container_file cmd project_root
  if ! exe="$(find_exe)"; then
    printf 'ERROR: docker/podman not found\n'
    exit 1
  fi

  if ! container_file="$(find_container_file ".")"; then
    printf 'ERROR: No such Dockerfile or Containerfile\n'
    exit 1
  fi

  project_root="$(dirname "$container_file")"
  tag_name="$(basename "$project_root")"

  # parse args
  cmd="${1:-shell}"
  shift 1
  case "${cmd}" in
    "build")
      runcmd "$exe" "build" "$@" "-t" "$tag_name" "."
      ;;
    "run")
      runcmd "$exe" "run" "$@" "-v" "$project_root:/mnt" "--rm" "--name" "$tag_name" "$tag_name"
      ;;
    "shell")
      runcmd "$exe" "run" "$@" "-v" "$project_root:/mnt" "-it" "--rm" "$tag_name" "sh"
      ;;
    "bash")
      runcmd "$exe" "run" "$@" "-v" "$project_root:/mnt" "-it" "--rm" "$tag_name" "bash"
      ;;
    "ls"|"list")
      runcmd "$exe" "container" "list" "--all" "--external"
      ;;
    "mrproper")
      runcmd "$exe" "container" "list" "--all" "--external" | while read -r line; do
        id="$(echo "$line" | awk '{print $1}')"
        if [[ -n "$id" ]] && [[ "$id" != "CONTAINER" ]]; then
          runcmd "$exe" "container" "rm" "-f" "$id"
        fi
      done
      runcmd "$exe" "system" "reset" "-f"
      if [[ -d "$HOME/.cache/podman" ]]; then
        rm -rf "$HOME/.cache/podman"
        mkdir -p "$HOME/.cache/podman"
      fi
      ;;
    *)
      printf '%s is not a valid command\n' "$cmd"
      usage
      ;;
  esac
}

main "$@"
