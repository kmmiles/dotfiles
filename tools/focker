#!/bin/bash
################################################################################
# TODO: look at envfile stuff on github

set -euo pipefail

usage() {
  printf 'Usage: %s [command [podman args]] [Containerfile]\n\n' "$(basename "$0")"
  printf '[command]\tAvailable options: "build", "run", "shell"\n'
  printf '\t\tDefault option: "shell"\n'
  exit 1
}

find_lastarg() { for i in "$@"; do :; done; printf '%s\n' "${i:-}" ; }

# find_container_file [directory]
# 
find_container_file() {
  local source_path="${1:-.}"
  source_path="$(realpath -sm "$source_path")"
  if [[ ! -d "$source_path" ]]; then
    return 1
  fi

  while [[ "$source_path" != "/" ]]; do
    if [[ -f "$source_path"/Dockerfile ]]; then
      printf '%s/Dockerfile\n' "$source_path"
      return 0
    elif [[ -f "$source_path"/Containerfile ]]; then
      printf '%s/Containerfile\n' "$source_path"
      return 0
    else
      source_path="$(dirname "$source_path")"
    fi
  done

  return 1
}

runcmd() {
  local exe
  if command -v "podman" > /dev/null; then
    exe="podman"
  elif command -v "docker" > /dev/null; then
    exe="docker"
  else 
    return 1
  fi

  args=("$@")
  1>&2 printf 'Executing: %s %s\n' "$exe" "${args[*]}"
  $exe "${args[@]}"
}

main() {
  # parse args...i know
  local args lastarg container_file container_root cmd
  args=("$@")
  lastarg="$(find_lastarg "${args[@]}")"
  if [[ -n "$lastarg" ]] && [[ -f "$lastarg" ]]; then
    # last arg is a file
    container_file="$(realpath -sm "$lastarg")"
    unset "args[${#args[@]}-1]"
  elif [[ -n "$lastarg" ]] && [[ -d "$lastarg" ]]; then
    # last arg is a dir
    container_file="$(find_container_file "$lastarg")"
    unset "args[${#args[@]}-1]"
  else
    container_file="$(find_container_file)"
  fi
  container_root="$(dirname "$container_file")"
  cmd="${args[0]:-build}"
  unset "args[0]"


  # determine tag name.
  # if container_file is named `Containerfile.something` then `something` will be added to the tag
  # e.g. myproject:something
  local tag_name
  tag_name="$(basename "$container_root")"
  x=$(basename "$container_file" | cut -s -d. -f 2)
  if [[ -n "$x" ]]; then
    tag_name="${tag_name}:${x}"
  fi

  #printf 'x=%s, container_root=%s, container_file=%s, tag_name=%s\n' "$x" "$container_root" "$container_file" "$tag_name"
  #exit 1

  case "${cmd}" in
    "build")
      args=("-f" "$container_file" "${args[@]}")
      runcmd "build" "${args[@]}" "-t" "$tag_name" "."
      ;;
    "run")
      runcmd "run" "${args[@]}" "-v" "$container_root:/mnt" "--rm" "--name" "$tag_name" "$tag_name"
      ;;
    "shell")
      runcmd "run" "${args[@]}" "-v" "$container_root:/mnt" "-it" "--rm" "$tag_name" "sh"
      ;;
    "bash")
      runcmd "run" "${args[@]}" "-v" "$container_root:/mnt" "-it" "--rm" "$tag_name" "bash"
      ;;
    "zsh")
      runcmd "run" "${args[@]}" "-v" "$container_root:/mnt" "-it" "--rm" "$tag_name" "zsh"
      ;;
    "ls"|"list")
      runcmd "container" "list" "--all" "--external"
      ;;
    "mrproper")
      runcmd "container" "list" "--all" "--external" | while read -r line; do
        id="$(echo "$line" | awk '{print $1}')"
        if [[ -n "$id" ]] && [[ "$id" != "CONTAINER" ]]; then
          runcmd "container" "rm" "-f" "$id"
        fi
      done
      runcmd "system" "reset" "-f"
      if [[ -d "$HOME/.cache/podman" ]]; then
        rm -rf "$HOME/.cache/podman"
        mkdir -p "$HOME/.cache/podman"
      fi
      ;;
    *)
      printf '%s is not a valid command\n' "$cmd"
      usage
      ;;
  esac
}

main "$@"
