#!/bin/bash
################################################################################
# TODO: look at envfile stuff on github

set -euo pipefail

dbg()   { if [[ -n "${DEBUG:-}" ]]; then 1>&2 printf 'DEBUG: %s\n' "$*"; fi; }
err()   { 1>&2 printf '%sERROR: %s%s\n' "$(tput setaf 1)" "$*" "$(tput sgr0)"; }
warn()  { printf '%sWARNING: %s%s\n' "$(tput setaf 3)" "$*" "$(tput sgr0)"; }
info()  { printf '%s\n' "$*"; }
onerr() { local s=$?; err "$0:${BASH_LINENO[0]} $BASH_COMMAND"; exit $s; }
has()   { type "$1" &> /dev/null ; } 
trap onerr ERR

usage() {
  printf 'Usage: %s [command [podman args]] [Containerfile]\n\n' "$(basename "$0")"
  printf '[command]\tAvailable options: "build", "run", "shell"\n'
  printf '\t\tDefault option: "shell"\n'
  exit 1
}

find_lastarg() { for i in "$@"; do :; done; printf '%s\n' "${i:-}" ; }

# find_container_file [directory]
# 
find_container_file() {
  local source_path="${1:-.}"
  source_path="$(realpath -sm "$source_path")"
  if [[ ! -d "$source_path" ]]; then
    return 1
  fi

  while [[ "$source_path" != "/" ]]; do
    if [[ -f "$source_path"/Dockerfile ]]; then
      printf '%s/Dockerfile\n' "$source_path"
      return 0
    elif [[ -f "$source_path"/Containerfile ]]; then
      printf '%s/Containerfile\n' "$source_path"
      return 0
    else
      source_path="$(dirname "$source_path")"
    fi
  done

  return 1
}

print_wsl_bat() {
  local distro_name="${1:-mywsldistro}"
  cat << EOF
@echo off

set distro_name=$distro_name
set distro_tarball=.\rootfs.tar

set /p distro_name="Specify the distro name (or press enter to use "%distro_name%"): "
set distro_dest=%USERPROFILE%\WSL2\systems\%distro_name%

:do_prompt
  choice /C YN /M "IF THE '%distro_name%' DISTRO ALREADY EXISTS IT WILL BE REMOVED!!!"
  IF ERRORLEVEL 2 goto do_exit 
  IF ERRORLEVEL 1 goto do_install
  goto do_prompt

:do_install
  wsl --terminate %distro_name% >nul 2>&1
  wsl --unregister %distro_name% >nul 2>&1
  md %distro_dest% >nul 2>&1
  wsl --import %distro_name% %distro_dest% %distro_tarball%
  echo Starting %distro_name%...
  wsl -d %distro_name%

:do_exit
  echo Exiting...
  pause
  exit /b
EOF
}

runcmd() {
  local exe
  if command -v "podman" > /dev/null; then
    exe="podman"
    rundir="/run/user/$(id -u)"
    if [[ ! -d "$rundir" ]]; then
      warn "Creating missing $rundir"
      sudo mkdir -p "$rundir" 
      sudo chown "$(id -un):$(id -gn)" "$rundir"
    fi
  elif command -v "docker" > /dev/null; then
    exe="docker"
  else 
    return 1
  fi

  args=("$@")
  1>&2 printf 'Executing: %s %s\n' "$exe" "${args[*]}"
  $exe "${args[@]}"
}

main() {
  # parse args...i know
  local args lastarg container_file container_root cmd
  args=("$@")
  lastarg="$(find_lastarg "${args[@]}")"
  if [[ -n "$lastarg" ]] && [[ -f "$lastarg" ]]; then
    # last arg is a file
    container_file="$(realpath -sm "$lastarg")"
    unset "args[${#args[@]}-1]"
  elif [[ -n "$lastarg" ]] && [[ -d "$lastarg" ]]; then
    # last arg is a dir
    container_file="$(find_container_file "$lastarg")"
    unset "args[${#args[@]}-1]"
  else
    container_file="$(find_container_file)"
  fi
  container_root="$(dirname "$container_file")"
  cmd="${args[0]:-build}"
  unset "args[0]"


  # determine tag name.
  # if container_file is named `Containerfile.something` then `something` will be added to the tag
  # e.g. myproject:something
  local tag_name
  tag_name="$(basename "$container_root")"
  x=$(basename "$container_file" | cut -s -d. -f 2)
  if [[ -n "$x" ]]; then
    tag_name="${tag_name}:${x}"
  fi

  #printf 'x=%s, container_root=%s, container_file=%s, tag_name=%s\n' "$x" "$container_root" "$container_file" "$tag_name"
  #exit 1

  case "${cmd}" in
    "build")
      args=("-f" "$container_file" "${args[@]}")
      runcmd "build" "${args[@]}" "-t" "$tag_name" "."
      ;;
    "run")
      runcmd "run" "${args[@]}" "-v" "$container_root:/mnt" "--rm" "--name" "$tag_name" "$tag_name"
      ;;
    "shell")
      runcmd "run" "${args[@]}" "-v" "$container_root:/mnt" "-it" "--rm" "$tag_name" "sh"
      ;;
    "bash")
      runcmd "run" "${args[@]}" "-v" "$container_root:/mnt" "-it" "--rm" "$tag_name" "bash"
      ;;
    "zsh")
      runcmd "run" "${args[@]}" "-v" "$container_root:/mnt" "-it" "--rm" "$tag_name" "zsh"
      ;;
    "ls"|"list")
      runcmd "container" "list" "--all" "--external"
      ;;
    "export")
      runcmd "container" "rm" "$tag_name"
      runcmd "run" "--name" "$tag_name" "$tag_name"
      runcmd "export" "--output" "${tag_name}-rootfs.tar" "$tag_name" 
      ;;
    "wslexport")
      rm -rf "${tag_name}-wsl"
      mkdir -p "${tag_name}-wsl"
      runcmd "container" "rm" "$tag_name" || :
      runcmd "run" "--name" "$tag_name" "$tag_name"
      runcmd "export" "--output" "${tag_name}-wsl/rootfs.tar" "$tag_name" 
      print_wsl_bat "$tag_name" > "${tag_name}-wsl/install.bat"
      ;;
    "mrproper")
      runcmd "container" "list" "--all" "--external" | while read -r line; do
        id="$(echo "$line" | awk '{print $1}')"
        if [[ -n "$id" ]] && [[ "$id" != "CONTAINER" ]]; then
          runcmd "container" "rm" "-f" "$id"
        fi
      done
      runcmd "system" "reset" "-f"
      if [[ -d "$HOME/.cache/podman" ]]; then
        rm -rf "$HOME/.cache/podman"
        mkdir -p "$HOME/.cache/podman"
      fi
      ;;
    *)
      printf '%s is not a valid command\n' "$cmd"
      usage
      ;;
  esac
}

main "$@"
