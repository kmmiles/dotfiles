#!/bin/bash
################################################################################

usage() {
  printf 'Usage: %s [command]\n\n' "$(basename "$0")"
  printf '[command]\tAvailable options: "build", "run", "shell"\n'
  printf '\t\tDefault option: "shell"\n'
  exit 1
}

# find_container_file [source_path]
#
# Print path of nearest Containerfile/Dockerfile.
# Defaults to current working dir if [source_path] not supplied 
find_container_file() {
  local source_path
  source_path="$(realpath -sm "${*:-.}")" || return 1
  while [[ "$source_path" != "/" ]]; do
    if [[ -f "$source_path"/Dockerfile ]]; then
      printf '%s/Dockerfile\n' "$source_path"
      return 0
    elif [[ -f "$source_path"/Containerfile ]]; then
      printf '%s/Containerfile\n' "$source_path"
      return 0
    else
      source_path="$(dirname "$source_path")"
    fi
  done
  return 1
}

# determine tag name for us in docker commands
find_tag_name() {
  local container_file
  container_file="$(find_container_file "$@")" || return 1
  printf '%s\n' "$(basename "$container_file")"
}

# determine which executable to use
find_exe() {
  if command -v "podman" > /dev/null; then
    printf 'podman\n'
  elif command -v "docker" > /dev/null; then
    printf 'docker\n'
  else 
    return 1
  fi
}

main() {
  local exe container_file cmd
  if ! exe="$(find_exe)"; then
    printf 'ERROR: docker/podman not found\n'
    exit 1
  fi

  if ! container_file="$(find_container_file)"; then
    printf 'ERROR: No such Dockerfile or Containerfile\n'
    exit 1
  fi

  tag_name="$(basename "$(dirname "$container_file")")"

  cmd="${1:-shell}"
  shift 1
  case "${cmd}" in
    "shell")
      printf 'doing shell\n'
      $exe run -it --rm "$@" "$tag_name" sh
      ;;
    "bash")
      printf 'doing shell\n'
      $exe run -it --rm "$@" "$tag_name" bash
      ;;
    "build")
      printf 'doing build\n'
      args=("build")
      args+=("$@")
      args+=("-t" "$tag_name" ".")
      #echo "$exe ${args[*]}"
      $exe "${args[@]}"
      ;;
    "run")
      printf 'doing run\n'
      $exe run --rm --name "$tag_name" "$@" "$tag_name"
      ;;
    *)
      printf '%s is not a valid command\n' "$cmd"
      usage
      ;;
  esac
}

main "$@"
