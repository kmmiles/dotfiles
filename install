#!/bin/bash

set -euo pipefail

err()   { 1>&2 printf '%sERROR: %s%s\n' "$(tput setaf 1)" "$*" "$(tput sgr0)"; }
warn()  { 1>&2 printf '%sWARNING: %s%s\n' "$(tput setaf 3)" "$*" "$(tput sgr0)"; }
info()  { printf '%s\n' "$*"; }
onerr() { local s=$?; err "$0:${BASH_LINENO[0]} $BASH_COMMAND"; exit $s; }
has()   { type "$1" &> /dev/null ; } 
trap onerr ERR

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-}")" && pwd)"
DOWNLOAD_DIR="$HOME/Downloads"
LOCAL_DIR="$HOME/.local"
BIN_DIR="$LOCAL_DIR/bin"
SRC_DIR="$LOCAL_DIR/src"

declare -A urls
urls[nvim]="https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz"
urls[prettyping]="https://raw.githubusercontent.com/denilsonsa/prettyping/master/prettyping"
urls[exa]="https://github.com/ogham/exa/releases/download/v0.9.0/exa-linux-x86_64-0.9.0.zip"
urls[glow]="https://github.com/charmbracelet/glow/releases/download/v1.0.2/glow_1.0.2_linux_x86_64.tar.gz"
urls[youtube-dl]="https://yt-dl.org/downloads/latest/youtube-dl"
urls[yq]="https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64.tar.gz"
urls[fnm]="https://github.com/Schniz/fnm/releases/download/v1.23.0/fnm-linux.zip"
urls[nord-dircolors]="https://github.com/arcticicestudio/nord-dircolors"
urls[nord-tmux]="https://github.com/arcticicestudio/nord-tmux"
urls[nord-vim]="https://github.com/arcticicestudio/nord-vim"
urls[ale]="https://github.com/dense-analysis/ale.git"
urls[odin]="https://github.com/Tetralux/odin.vim"
urls[zsh-syntax-highlighting]="https://github.com/zsh-users/zsh-syntax-highlighting"
urls[zsh-autosuggestions]="https://github.com/zsh-users/zsh-autosuggestions"
urls[zsh-history-substring-search]="https://github.com/zsh-users/zsh-history-substring-search"
urls[zsh-completions]="https://github.com/zsh-users/zsh-completions"

################################################################################
# Create a symlink
# Arguments:
#   src
#   dest
# Returns:
#   1 on bad input
################################################################################
symlink() {
  local src dest backup

  src="${1:-}"
  dest="${2:-}"
  [[ -n "$src" && -n "$dest" ]] || return 1

  # convert paths to absolute
  src="$(realpath -sm "$src")"
  dest="$(realpath -sm "$dest")"

  # destination exists and isn't a link; rename it.
  if [[ -f "$dest" && ! -h "$dest" ]]; then
    backup="$(dirname "$dest")/$(basename "$dest").$(date '+%s')"
    info "Renaming file $dest -> $backup"
    mv -f "$dest" "$backup"
  fi

  # if the link doesn't exist, create it
  if [[ ! -h "$dest" ]]; then
    info "Symlinking $src -> $dest"
    mkdir -vp "$(dirname "$dest")"
    ln -bsf "$src" "$dest"
  fi
}

################################################################################
# Downloads url
# Arguments:
#   The URL
# Outputs:
#   Absolute path of downloaded file on success
# Returns:
#   1 on error
################################################################################
download() {
  local url filename filepath

  url="${1:-}"
  [[ -n "$url" ]] || return 1

  filename=$(basename "$url")
  [[ -n "$filename" ]] || return 1

  filepath="$DOWNLOAD_DIR/$filename"
  if [[ ! -f "$filepath" ]]; then
    mkdir -p "$DOWNLOAD_DIR"
    curl -fL -o "$filepath" "$url" || return 1
  fi

  printf '%s\n' "$filepath"
}

install_packages() {
  mkdir -p "$BIN_DIR"

  if ! has "nvim"; then
    info "Installing nvim"
    tar xmzf "$(download "${urls[nvim]}")" --strip-components=1 -C "$LOCAL_DIR"
  fi

  # prettyping
  if ! has "prettyping"; then
    info "Installing prettyping"
    install -D -v -m 755 -t "$BIN_DIR" "$(download "${urls[prettyping]}")" 
  fi

  # exa
  if ! has "exa"; then
    info "Installing exa"
    unzip -qu "$(download "${urls[exa]}")" -d "$DOWNLOAD_DIR"
    mv -fv "$DOWNLOAD_DIR/exa-linux-x86_64" "$DOWNLOAD_DIR/exa"
    install -D -v -m 755 -t "$BIN_DIR" "$DOWNLOAD_DIR/exa"
  fi

  # fnm
  if ! has "fnm"; then
    info "Installing fnm"
    unzip -qu "$(download "${urls[fnm]}")" -d "$DOWNLOAD_DIR"
    install -D -v -m 755 -t "$BIN_DIR" "$DOWNLOAD_DIR/fnm"
  fi

  # glow
  if ! has "glow"; then
    info "Installing glow"
    tar xmzf "$(download "${urls[glow]}")" -C "$DOWNLOAD_DIR" glow
    install -D -v -m 755 -t "$BIN_DIR" "$DOWNLOAD_DIR/glow"
  fi

  # yq 
  if ! has "yq"; then
    info "Installing yq"
    tar xmzf "$(download "${urls[yq]}")" -C "$DOWNLOAD_DIR" ./yq_linux_amd64
    mv -fv "$DOWNLOAD_DIR/yq_linux_amd64" "$DOWNLOAD_DIR/yq"
    install -D -v -m 755 -t "$BIN_DIR" "$DOWNLOAD_DIR/yq"
  fi

  # youtube-dl
  if ! has "youtube-dl"; then
    info "Installing youtube-dl"
    install -D -v -m 755 -t "$BIN_DIR" "$(download "${urls[youtube-dl]}")"
  fi
}

install_nord_theme() {
  mkdir -p "$SRC_DIR"

  if [[ ! -d "$SRC_DIR/nord-dircolors" ]]; then
    git clone --depth 1 "${urls[nord-dircolors]}" "$SRC_DIR/nord-dircolors"
    symlink "$SRC_DIR/nord-dircolors/src/dir_colors" "$HOME/.dir_colors"
  fi

  if [[ ! -d "$SRC_DIR/nord-tmux" ]]; then
    git clone --depth 1 "${urls[nord-tmux]}" "$SRC_DIR/nord-tmux"
    symlink "$SRC_DIR/nord-tmux/nord.tmux" "$HOME"/.tmux/nord.tmux
  fi

  if [[ ! -d "$SRC_DIR/nord-vim" ]]; then
    git clone --depth 1 "${urls[nord-vim]}" "$SRC_DIR/nord-vim"
    symlink "$SRC_DIR/nord-vim/colors/nord.vim" "$HOME"/.vim/colors/nord.vim
  fi
}

install_vim_plugins() {
  vim_plugins_dir="$HOME/.vim/pack/git-plugins/start"
  mkdir -p "$vim_plugins_dir"
  for name in ale odin; do
    plugin_url="${urls[$name]}"
    if [[ ! -d "$vim_plugins_dir"/$(basename "$plugin_url" .git) ]]; then
      git clone --depth 1 "$plugin_url" "$vim_plugins_dir/$(basename "$plugin_url" .git)"
    fi
  done
}

################################################################################
# zsh plugins
################################################################################
install_zsh_plugins() {
  local dest_dir
  for plugin in zsh-syntax-highlighting zsh-autosuggestions \
    zsh-history-substring-search zsh-completions; do
    dest_dir="$HOME/.local/src/zsh-users/$plugin"
    if [[ ! -d "$dest_dir" ]]; then 
      git clone --depth 1 "${urls["$plugin"]}" "$dest_dir"
    fi
  done
}

################################################################################
# link dotfiles
################################################################################
link_dotfiles() {
  local dotfiles_dir
  dotfiles_dir="$SCRIPT_DIR/dotfiles"
  readarray -t dotfiles < <(cd "$dotfiles_dir" && find "." -mindepth 1 -type f)
  for dotfile in "${dotfiles[@]}"; do
    symlink "$dotfiles_dir/$dotfile" "$HOME/$dotfile"
  done
}

################################################################################
# link tools
################################################################################
link_tools() {
  local tools_dir tools
  tools_dir="$SCRIPT_DIR/tools"
  readarray -t tools < <(cd "$tools_dir" && find "." -mindepth 1 -type f)
  for tool in "${tools[@]}"; do
    symlink "$tools_dir/$tool" "$HOME/.local/bin/$tool"
  done
}

################################################################################
# check deps
################################################################################
check_deps() {
  for dep in bash git curl unzip; do
    if ! command -v "$dep" > /dev/null 2>&1; then
      err "$dep not found"
      return 1
    fi
  done
}

main() {
  usage() {
    printf 'Usage: %s [OPTIONS]\n\n' "$(basename "$0")"
    printf 'OPTIONS\n'
    printf ' -e\tInstall everything. Default is link only.\n'
    printf '\tAlternatively, can be set in environment with: EVERYTHING=true\n'
  }

  local everything="${EVERYTHING:-false}"
  while getopts 'e' flag; do
    case "${flag}" in
      e) everything=true ;;
      *) echo "Unexpected option ${flag}"; usage; exit 1 ;;
    esac
  done
  #echo "bailing for debug" ; exit 10

  link_dotfiles
  link_tools
  if $everything; then
    check_deps
    install_packages
    install_nord_theme
    install_vim_plugins
    install_zsh_plugins
  fi

  info "Install complete."
}

main "$@"
