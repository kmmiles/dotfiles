#!/bin/bash

set -euo pipefail

dbg()   { if [[ -n "${DEBUG:-}" ]]; then 1>&2 printf 'DEBUG: %s\n' "$*"; fi; }
err()   { 1>&2 printf '%sERROR: %s%s\n' "$(tput setaf 1)" "$*" "$(tput sgr0)"; }
warn()  { printf '%sWARNING: %s%s\n' "$(tput setaf 3)" "$*" "$(tput sgr0)"; }
info()  { printf '%s\n' "$*"; }
onerr() { local s=$?; err "$0:${BASH_LINENO[0]} $BASH_COMMAND"; exit $s; }
have()  { type "$@" &> /dev/null ; } 
trap onerr ERR

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-.}")" && pwd)"
# shellcheck source=urls.sh
source "$SCRIPT_DIR/urls.sh"

DOWNLOAD_DIR="$HOME/Downloads"
LOCAL_DIR="$HOME/.local"
LOCAL_BIN_DIR="$LOCAL_DIR/bin"
LOCAL_SRC_DIR="$LOCAL_DIR/src"

################################################################################
# Create a symlink
# Arguments:
#   src
#   dest
# Returns:
#   1 on bad input
################################################################################
symlink() {
  local src dest backup

  src="${1:-}"
  dest="${2:-}"
  [[ -n "$src" && -n "$dest" ]] || return 1

  # convert paths to absolute
  src="$(realpath -sm "$src")"
  dest="$(realpath -sm "$dest")"

  if [[ -f "$dest" && ! -h "$dest" ]]; then
    # destination exists and isn't a link; rename it.
    backup="$(dirname "$dest")/$(basename "$dest").$(date '+%s')"
    info "Renaming file $dest -> $backup"
    mv -f "$dest" "$backup"
  elif [[ ! -e "$dest" ]]; then
    # destination exists and is a broken symlink; remove it.
    dbg "$dest exists and is broken"
    rm -f "$dest"
  else
    dbg "do nothing for $dest"
  fi

  # if the link doesn't exist, create it
  if [[ ! -h "$dest" ]]; then
    info "Symlinking $src -> $dest"
    mkdir -vp "$(dirname "$dest")"
    ln -bsf "$src" "$dest"
  fi
}

################################################################################
# download <url>
#
# Outputs:
#   Absolute path of downloaded file on success
# Returns:
#   1 on error
################################################################################
download() {
  local url filename filepath

  url="${1:-}"
  [[ -n "$url" ]] || return 1

  filename="$(basename "$url")"
  [[ -n "$filename" ]] || return 1

  filepath="$DOWNLOAD_DIR/$filename"
  if [[ ! -f "$filepath" ]]; then
    mkdir -p "$DOWNLOAD_DIR"
    curl -fL -o "$filepath" "$url" || return 1
  fi

  printf '%s\n' "$filepath"
}

################################################################################
# gitclone <url> [base directory]
#
# Outputs:
#   Absolute path of cloned directory on success
# Returns:
#   1 on error
#
# Clone to `~/.local/src/dotfiles`: gitclone https://github.com/kmmiles/dotfiles
# Clone to `/dotfiles`: gitclone https://github.com/kmmiles/dotfiles /
################################################################################
gitclone() {
  local repo_url base_dir dest_dir

  repo_url="${1:-}"
  [[ -n "$repo_url" ]] || return 1

  base_dir="${2:-}"
  if [[ -z "$base_dir" ]]; then
    base_dir="${LOCAL_SRC_DIR:-}"
  fi
  [[ -n "$base_dir" ]] || return 1

  dest_dir="$base_dir/$(basename "$repo_url" .git)"
  if [[ -d "$dest_dir/.git" ]]; then
    # repo already exists, just print the path.
    printf '%s\n' "$(realpath -sm "$dest_dir")"
  elif [[ ! -d "$dest_dir" ]]; then
    # repo doesn't exist, clone it and print path.
    mkdir -p "$base_dir" && \
      git clone --depth 1 "$repo_url" "$dest_dir"
      printf '%s\n' "$(realpath -sm "$dest_dir")"
  fi
}

install_packages() {
  mkdir -p "$LOCAL_BIN_DIR"

  PATH="$LOCAL_BIN_DIR:$HOME/.cargo/bin:$HOME/.local/share/rtx/bin:$PATH"

  # rtx
  if ! have rtx; then
    info "Installing rtx"
    "$SCRIPT_DIR"/dotfiles/.local/bin/install-rtx
  fi

  info "Calling rtx install"
  if ! rtx install; then
    err "rtx install failed"
    return 1
  fi

  # youtube-dl
  if ! have "youtube-dl"; then
    info "Installing youtube-dl"
    install -D -v -m 755 -t "$LOCAL_BIN_DIR" "$(download "${urls[youtube-dl]}")"
  fi

  # podman-compose
  if have podman pip3 && ! have podman-compose; then
    pip3 install --user podman-compose
  fi

  # prettyping
  if ! have prettyping; then
    info "Installing prettyping"
    install -D -v -m 755 -t "$LOCAL_BIN_DIR" "$(download "${urls[prettyping]}")"
  fi
}

install_nord_theme() {
  symlink "$(gitclone "${urls[nord-dircolors]}")/src/dir_colors" "$HOME/.dir_colors" 
  symlink "$(gitclone "${urls[nord-tmux]}")/nord.tmux" "$HOME/.tmux/nord.tmux" 
  symlink "$(gitclone "${urls[nord-vim]}")/colors/nord.vim" "$HOME/.vim/colors/nord.vim" 
}

install_tmux_plugins() {
  local target_dir="$HOME/.tmux/plugins/tpm"
  if [[ ! -d "$target_dir" ]]; then
    mkdir -p "$(dirname "$target_dir")"
    git clone "${urls[tpm]}" "$target_dir"
  fi
  "$HOME"/.tmux/plugins/tpm/bin/install_plugins
}

install_vim_plugins() {
  for name in ale odin vim-go; do
    gitclone "${urls[$name]}" "$HOME/.vim/pack/git-plugins/start" > /dev/null
  done
  nohup vim -S <(echo -e "GoInstallBinaries \n q \n q") > /dev/null 2>&1 &
}

################################################################################
# zsh plugins
################################################################################
install_zsh_plugins() {
  for plugin in zsh-syntax-highlighting zsh-autosuggestions \
      zsh-history-substring-search zsh-completions; do
    gitclone "${urls["$plugin"]}" "$LOCAL_SRC_DIR/zsh-users" > /dev/null
  done
}

################################################################################
# link dotfiles
################################################################################
link_dotfiles() {
  local dotfiles_dir
  dotfiles_dir="$SCRIPT_DIR/dotfiles"
  readarray -t dotfiles < <(cd "$dotfiles_dir" && find "." -mindepth 1 -type f)
  for dotfile in "${dotfiles[@]}"; do
    symlink "$dotfiles_dir/$dotfile" "$HOME/$dotfile"
  done
}

main() {
  usage() {
    printf 'Usage: %s [OPTIONS]\n\n' "$(basename "$0")"
    printf 'OPTIONS\n'
    printf ' -l\tLink only\n'
  }


  check_deps() {
    for dep in bash git curl unzip; do
      if ! command -v "$dep" > /dev/null 2>&1; then
        err "$dep not found"
        return 1
      fi
    done
  }

  local link_only=false
  while getopts 'l' flag; do
    case "${flag}" in
      l) link_only=true ;;
      *) echo "Unexpected option ${flag}"; usage; exit 1 ;;
    esac
  done
  #echo "bailing for debug" ; exit 10

  info "checking deps..."
  check_deps

  info "linking dotfiles to $HOME..."
  link_dotfiles
  if $link_only; then exit 0; fi

  info "install packages to $HOME..."
  install_packages

  info "install nord theme for tmux, vim, and dircolors..."
  install_nord_theme

  info "install vim plugins..."
  install_vim_plugins

  info "install zsh plugins..."
  install_zsh_plugins

  info "install tmux plugins..."
  install_tmux_plugins

  info "Install complete."
}

main "$@"
