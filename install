#!/bin/bash

################################################################################
# Create a symlink
# Arguments:
#   src
#   dest
# Returns:
#   1 on bad input
################################################################################
symlink() {
  local src dest backup

  src="${1:-}"
  dest="${2:-}"
  [[ -n "$src" && -n "$dest" ]] || return 1

  # convert paths to absolute
  src="$(realpath -s "$src")"
  dest="$(realpath -s "$dest")"

  # destination exists and isn't a link; rename it.
  if [[ -f "$dest" && ! -h "$dest" ]]; then
    backup="$(dirname "$dest")/$(basename "$dest").$(date '+%s')"
    printf 'Renaming file %s -> %s\n' "$dest" "$backup"
    mv -f "$dest" "$backup"
  fi

  # if the link doesn't exist, create it
  if [[ ! -h "$dest" ]]; then
    printf 'Symlinking "%s" -> "%s"\n' "$src" "$dest"
    mkdir -p "$(dirname "$dest")"
    ln -bsf "$src" "$dest"
  fi
}

################################################################################
# Downloads url
# Arguments:
#   The URL
# Outputs:
#   Absolute path of downloaded file on success
# Returns:
#   1 on error
################################################################################
dl() {
  local url filepath filename

  url="${1:-}"
  [[ -z "$url" ]] || return 1

  filename=$(basename "$url")
  [[ -z "$filename" ]] || return 1

  filepath="$HOME"/Downloads/"$filename"
  if [[ ! -f "$filepath" ]]; then
    mkdir -p "$HOME"/Downloads
    if ! curl -sfL -o "$filepath" "$url"; then
      return 1
    fi
  fi

  printf '%s\n' "$filepath"
}

################################################################################
# install third party stuff
################################################################################
install_third_party() {
  pp_url="https://raw.githubusercontent.com/denilsonsa/prettyping/master/prettyping"
  exa_url="https://github.com/ogham/exa/releases/download/v0.9.0/exa-linux-x86_64-0.9.0.zip"
  glow_url="https://github.com/charmbracelet/glow/releases/download/v1.0.2/glow_1.0.2_linux_x86_64.tar.gz"
  yt_url="https://yt-dl.org/downloads/latest/youtube-dl"
  yq_url="https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64.tar.gz"
  fnm_url="https://github.com/Schniz/fnm/releases/download/v1.23.0/fnm-linux.zip"
  #yank_url="https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip"

  local_dir="$HOME/.local"
  bin_dir="$local_dir/bin"
  downloads="$HOME"/Downloads

  mkdir -p "$bin_dir"

  ################################################################################
  # prettyping
  ################################################################################
  if [[ ! -f "$bin_dir/prettyping" ]]; then
    install -D -v -m 755 -t "$bin_dir" "$(dl $pp_url)"
  fi

  ################################################################################
  # exa
  ################################################################################
  if [[ ! -f "$bin_dir/exa" ]]; then
    unzip -qu "$(dl $exa_url)" -d "$downloads"
    mv -fv "$downloads/exa-linux-x86_64" "$downloads/exa"
    install -D -v -m 755 -t "$bin_dir" "$downloads/exa"
  fi

  ################################################################################
  # fnm
  ################################################################################
  if [[ ! -f "$bin_dir/fnm" ]]; then
    unzip -qu "$(dl $fnm_url)" -d "$downloads"
    install -D -v -m 755 -t "$bin_dir" "$downloads/fnm"
  fi

  ################################################################################
  # glow
  ################################################################################
  if [[ ! -f "$bin_dir"/glow ]]; then
    tar xmzf "$(dl $glow_url)" -C "$downloads" glow
    install -D -v -m 755 -t "$bin_dir" "$downloads/glow"
  fi

  ################################################################################
  # yq 
  ################################################################################
  if [[ ! -f "$bin_dir"/yq ]]; then
    tar xmzf "$(dl $yq_url)" -C "$downloads" ./yq_linux_amd64
    mv -fv "$downloads/yq_linux_amd64" "$downloads/yq"
    install -D -v -m 755 -t "$bin_dir" "$downloads/yq"
  fi

  ################################################################################
  # youtube-dl
  ################################################################################
  if [[ ! -f "$bin_dir"/youtube-dl ]]; then
    install -D -v -m 755 -t "$bin_dir" "$(dl $yt_url)"
  fi

  ################################################################################
  # win32yank.exe (for wsl2 only)
  # allows nvim to copy stuff to the windows clipboard
  ################################################################################
  #if $IS_WSL && [[ ! -f "$bin_dir/win32yank.exe" ]]; then
  #  unzip -qu "$(dl $yank_url)" -d "$downloads"
  #  install -D -v -m 755 -t "$bin_dir" "$downloads/win32yank.exe"
  #fi

  ################################################################################
  # nord themes
  ################################################################################
  names=(
    'nord-dircolors'
    'nord-tmux'
    'nord-vim'
  )

  for name in "${names[@]}"; do
    dest_dir="$HOME/.local/src/$name"
    if [[ ! -d "$dest_dir" ]]; then
      git clone --depth 1 "https://github.com/arcticicestudio/$name" "$dest_dir"
    fi
    case "${name}" in
      nord-dircolors)
        symlink "$dest_dir/src/dir_colors" "$HOME/.dir_colors"
        ;;
      nord-tmux)
        mkdir -p "$HOME"/.tmux
        symlink "$dest_dir"/nord.tmux "$HOME"/.tmux/nord.tmux
        ;;
      nord-vim)
        mkdir -p "$HOME"/.vim/colors
        symlink "$dest_dir"/colors/nord.vim "$HOME"/.vim/colors/nord.vim
        ;;
      *)
        echo "Unexpected case '${name}'"
        ;;
    esac
  done

  ################################################################################
  # vim plugins
  ################################################################################
  vim_plugins_dir="$HOME/.vim/pack/git-plugins/start"
  vim_plugins=(
    "https://github.com/dense-analysis/ale.git"
    "https://github.com/Tetralux/odin.vim"
  )

  mkdir -p "$vim_plugins_dir"
  for plugin_url in "${vim_plugins[@]}"; do
    if [[ ! -d "$vim_plugins_dir"/$(basename "$plugin_url" .git) ]]; then
      git clone --depth 1 "$plugin_url" "$vim_plugins_dir/$(basename "$plugin_url" .git)"
    fi
  done

  ################################################################################
  # zsh plugins
  ################################################################################
  zsh_plugins=(
    "zsh-users/zsh-syntax-highlighting"
    "zsh-users/zsh-autosuggestions"
    "zsh-users/zsh-history-substring-search"
    "zsh-users/zsh-completions"
  )

  for plugin in "${zsh_plugins[@]}"; do
    dest_dir="$HOME/.local/src/$plugin"
    if [[ ! -d "$dest_dir" ]]; then 
      git clone --depth 1 "https://github.com/$plugin" "$dest_dir"
    fi
  done
}

################################################################################
# link dotfiles
################################################################################
link_dotfiles() {
  dotfiles_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/dotfiles
  readarray -t dotfiles < <(cd "$dotfiles_dir" && find "." -mindepth 1 -type f)
  for dotfile in "${dotfiles[@]}"; do
    symlink "$dotfiles_dir/$dotfile" "$HOME/$dotfile"
  done
}

link_tools() {
  tools_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/tools
  readarray -t tools < <(cd "$tools_dir" && find "." -mindepth 1 -type f)
  for tool in "${tools[@]}"; do
    symlink "$tools_dir/$tool" "$HOME/.local/bin/$tool"
  done
}

main() {
  set -e

  required_cmds=("git" "curl")
  for required_cmd in "${required_cmds[@]}"; do
    if ! command -v "$required_cmd" > /dev/null 2>&1; then
      printf 'ERROR: %s not found\n' "$required_cmd"
      exit 1
    fi
  done

  install_third_party
  link_dotfiles
  link_tools
}

main "$@"
